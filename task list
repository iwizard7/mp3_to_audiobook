*План разработки приложения для macOS по конвертации MP3 в M4A с автоматической разметкой глав и автозаполнением метаданных*

Ниже подробный пошаговый план в виде task list с зависимостями, критериями приёма и примерными оценками. Предполагается нативное macOS‑приложение на Swift/SwiftUI с фоновым модулем обработки (CLI/daemon) и использованием локальных/внешних движков для ASR и поиска метаданных.

1. Подготовительный этап
- [ ] Создать репозиторий и структуру проекта
  - создать Git репозиторий, выполнить базовую README, LICENSE, .gitignore
  - установить ветвление (main, develop, feature/*)
  - критерий приёма: репозиторий и шаблон задач в tracker (GitHub Issues/GitLab)
- [ ] Подготовить CI/CD шаблон
  - настроить GitHub Actions для сборки macOS приложения (Debug)
  - критерий приёма: успешная CI сборка на PR
- [ ] Сформировать требования и acceptance criteria для MVP
  - список обязательных функций, ограничения по форматам и приватности
  - критерий приёма: утверждённый документ требований

2. Выбор стека и инструментария
- [ ] Выбрать UI стек
  - рекомендовано Swift + SwiftUI + Combine
  - принять решение об использовании AppKit для сложных элементов при необходимости
- [ ] Выбрать движок аудиопроцессинга и ASR
  - варианты ASR: whisper.cpp локально, OpenAI Whisper API, Vosk
  - варианты сегментации: FFmpeg silencedetect, AVFoundation + audio analysis, librosa (если использовать Python)
- [ ] Решить способ упаковки в M4A и добавления глав
  - варианты: FFmpeg/MP4Box (GPAC) или AVFoundation API
  - учесть лицензирование включаемых бинарников (FFmpeg лицензия)
- [ ] Решить модель архитектуры
  - одноприложное решение (всё внутри Swift) или гибрид (GUI в Swift, обработка в отдельном локальном Python/Go/Swift daemon)
  - критерий приёма: техническое решение задокументировано

3. Сборка окружения и зависимостей
- [ ] Подготовить список системных зависимостей
  - Homebrew, ffmpeg, mp4box, whisper.cpp (или докер/виртуальные env для ASR)
- [ ] Создать скрипты установки dev окружения
  - bootstrap.sh/Makefile для установки Homebrew пакетов и сборки whisper.cpp
  - критерий приёма: однострочный запуск на чистой macOS для подготовки dev окружения
- [ ] Определить вопросы лицензирования
  - проверить GPL/LGPL несовместимости, подготовить юридические заметки

4. Проектирование архитектуры приложения
- [ ] Спроектировать модули приложения
  - UI (SwiftUI)
  - Core processing (Audio ingestion, Segmentation, ASR, Chapter detection)
  - Metadata fetcher (API clients, caching)
  - Exporter (M4A packager)
  - Persistence (projects, logs, history)
- [ ] Создать диаграммы потоков данных и компонентные диаграммы
  - критерий приёма: архитектурная документация и согласование

5. Реализация базового GUI MVP
- [ ] Экран загрузки файла
  - drag&drop и выбор файла, показ метаданных из ID3
  - критерий приёма: можно загрузить MP3 и увидеть базовые теги
- [ ] Экран прогресса обработки
  - статус пайплайна, лог, унктовые ошибки
- [ ] Экран редактирования глав и метаданных
  - список автоматически найденных глав, возможности перемещения и переименования, предпрослушивание фрагмента
  - критерий приёма: можно вручную редактировать главы и сохранить изменения

6. Модуль детекции глав
- [ ] Реализовать простой детектор тишины
  - использовать ffmpeg silencedetect или AVAudio PCM анализ
  - параметры порогов и минимальная длительность паузы на настройку
  - критерий приёма: детектор возвращает список candidate time ranges
- [ ] Интегрировать ASR для поиска маркеров главы
  - прогон ключевых отрезков через ASR, поиск слов «глава», «chapter», номера
  - оптимизация: распознавать только начала/каждые N минут для ускорения
  - критерий приёма: если в аудио явно сказано «глава», это фиксируется с привязкой ко времени
- [ ] Постобработка границ
  - слияние слишком коротких сегментов, фильтрация «внутренних пауз»
  - критерий приёма: финальный набор глав выглядит логично в тестах на 10 книг
- [ ] Добавить опциональную speaker diarization (по необходимости)
  - интеграция pyannote или другой библиотеки
  - критерий приёма: опция включаемая в настройках

ChatGPT + Midjourney | GPT-5, [18.08.2025 14:16]
7. Модуль транскрипции и вычленения метаданных
-   Разработка pipeline для транскрибирования
  - деление файла на чанки, транскрибирование, временная агрегация
  - критерий приёма: транскрипт корректно связывается с таймклеми
-   Поиск названия и автора в транскрипте
  - шаблоны: начало файла, первые N минут, regex для «Название», «Автор»
  - fallback: извлечение из ID3
  - критерий приёма: в 80% тестовых файлов корректное предлагает title/author
-   Оптимизация производительности
  - кеширование результатов, параллелизация задач, опция ручного режима

8. Модуль поиска внешних метаданных и обложки
-   Реализовать поставщиков метаданных
  - Open Library API, Google Books API, ISBNdb (при наличии ISBN), Librivox, издательские API
  - критерий приёма: можно получить минимум 1 релевантный набор метаданных для тестовой книги
-   Скориcование и ранжирование кандидатов
  - сходство по названию, автору, приблизительная длительность, источник
  - критерий приёма: UI предлагает список кандидатов с рейтингом
-   Загрузка и верификация обложки
  - проверка разрешения и лицензии, предложить альтернативы
  - критерий приёма: можно выбрать обложку и увидеть превью

9. Экспорт в M4A с главами и метаданными
-   Выбор метода создания M4A
  - AVFoundation exporter (чистый Swift) или FFmpeg/MP4Box
  - учитывать требования Sandboxing/App Store
-   Реализация генерации ffmetadata/chapters.txt
  - генерация файла глав в формате, совместимом с выбранным инструментом
  - критерий приёма: шаги ручного теста конвертации работают и главы видны в плеере
-   Добавление обложки и тегов
  - добавить title, artist, album, cover art
  - критерий приёма: полученный output.m4a содержит корректные теги и embedded cover
-   Тесты воспроизведения в Apple Books/iTunes/QuickTime
  - критерий приёма: файл открывается и главы отображаются в основных плеерах

10. UI/UX и пользовательские фичи
-   Предослушивание и точная подгонка меток
  - waveform view, drag handles, переход к отрывку
-   Массовая обработка нескольких файлов и очереди
  - бэкенд-очередь с возможностью приоритизации
-   Экспорт настроек и профилей качества
  - bitrate, codec, naming conventions

11. Локализация и доступность
-   Интернационализация UI (RU + EN минимум)
-   Проверка доступности (VoiceOver, контраст)
-   Критерий приёма: UI локализуем, в настройках выбор языка

12. Логи, мониторинг и обработка ошибок
-   Реализовать системные логи и эвент трекинг
  - уровень логов: info/debug/error
-   Реализация механизма подачи отчётов об ошибках (с согласия пользователя)
-   Критерий приёма: логи помогают воспроизводить баги

13. Тестирование
-   Unit тесты для модулей (segmentation, metadata matching, exporter)
-   Интеграционные тесты энд‑ту‑енд на наборе контрольных аудиофайлов
-   Бета тестирование с группой пользователей (TestFlight или подписка бета)
-   Критерий приёма: багов критического уровня нет, метрика успешных конвертаций > 90% на тестах

14. Сборка релиза, подпись и нотация
-   Принять решение о канале распространения
  - App Store (sandboxing) или снаружи (dmg/zip, подписанный и нотифицированный)
-   Реализовать автоматическую подпись и notarize в CI
  - интеграция с Apple Developer, fastlane или xcrun altool
-   Критерий приёма: сборка проходит notarize и устанавливается на тестовой машине без предупреждений

15. Документация и поддержка пользователей
-   Создать User Guide и FAQ
-   Добавить механизм обратной связи и багтрекер
-   Критерий приёма: готова база знаний и канал поддержки

16. Юридические и приватные вопросы
-   Убедиться в праве на обработку контента пользователя
  - политика конфиденциальности, опции локальной обработки
-   Проверить лицензии встраиваемых библиотек (FFmpeg, whisper.cpp)
-   Критерий приёма: юридический чеклист пройден

17. Пострелизные задачи и развитие
-   Собрать телеметрию и фидбек, приоритизировать следующие фичи
-   Добавление улучшенных моделей сегментации и редактора глав
-   Добавление интеграции с облачными хранилищами (iCloud, Dropbox)

ChatGPT + Midjourney | GPT-5, [18.08.2025 14:16]
Рекомендации по приоритизации для MVP
- Высокий приоритет
  - загрузка MP3, простая детекция глав (тишина), базовый ASR для меток, экспорт M4A с главами, UI редактирования
- Средний приоритет
  - интеграция внешних API для метаданных и обложки, очереди обработки, бета тестирование
- Низкий приоритет
  - speaker diarization, продвинутые ML сегментаторы, облачные интеграции

Оценки времени (ориентировочно для команды 1‑2 человека)
- Подготовка и архитектура 1–2 недели
- MVP GUI + базовый processing pipeline 4–8 недель
- Интеграция ASR и metadata providers 2–4 недели
- Тестирование, подпись и релиз 2–4 недели

Следующие шаги
- Выберите архитектуру (полностью нативно Swift vs гибрид с внешним процессором)
- Решите, хотите ли локальный ASR (whisper.cpp) или облачный сервис
- Назначьте приоритеты функций для первой итерации
- Могу подготовить конкретный список задач в формате GitHub Issues по спринтам и/или написать прототип CLI для этапа детекции глав

Напишите, какой подход к ASR предпочтителен — локальный (whisper.cpp) или облачный (API) — и я разобью план на конкретные спринты и сформирую набор задач для трекера.

D. S., [18.08.2025 14:44]
перепиши план учитывая что локальный подход

ChatGPT + Midjourney | GPT-5, [18.08.2025 14:46]
*План разработки macOS приложения для локальной конвертации MP3 в M4A с автоматической разметкой глав и автозаполнением метаданных*

Ниже подробный пошаговый план в виде task list с зависимостями, критериями приёма и примерными оценками. Подход к ASR полностью локальный (whisper.cpp / ONNX / Vosk / другие локальные движки), без отправки аудио на внешние сервисы.

*Приоритеты для MVP*
- Высокий приоритет
  - локальная обработка аудио и транскрипция (whisper.cpp или Vosk)
  - детекция глав на основе тишины + ASR для уточнения меток
  - экспорт в M4A с встраиванием глав и метаданных (AVFoundation preferred)
  - GUI на SwiftUI с базовым редактором глав
- Средний приоритет
  - кэширование моделей и прогресс-бар, профили качества
  - опциональная локальная diarization
- Низкий приоритет
  - облачные интеграции, расширенная ML оптимизация

1 Подготовительный этап
- [ ] Создать репозиторий и структуру проекта
  - Git с ветвлением (main, develop, feature/*), README, .gitignore, LICENSE
  - Критерий приёма: репозиторий готов, базовый README с целями проекта
- [ ] Подготовить CI для сборки локального окружения
  - GitHub Actions или другой CI для проверки сборки проекта (Debug)
  - Критерий приёма: CI собирает Xcode проект без внешнего окружения

2 Выбор стека и локальных решений
- [ ] Выбрать локальную ASR реализацию и стратегию упаковки модели
  - Оценить варианты: whisper.cpp (C++ + GGML, поддерживает Apple Silicon через MPS), Vosk (offline), ONNX Runtime модели
  - Решение указать в документе
  - Критерий приёма: выбран поставщик ASR с аргументацией (точность, скорость, лицензия)
- [ ] Выбрать инструмент сегментации и обработки аудио
  - ffmpeg (silencedetect) или AVFoundation + собственный анализ RMS/energy
  - Критерий приёма: выбран способ детекции пауз и подготовлен план интеграции
- [ ] Выбрать метод упаковки M4A
  - Предпочтительно AVFoundation для нативности и совместимости с sandbox/App Store
  - Альтернатива: mp4box/ffmpeg в компоненте, но учесть лицензирование
  - Критерий приёма: метод экспорта утверждён

3 Настройка dev окружения и зависимостей
- [ ] Список системных зависимостей и скрипт установки
  - Homebrew, ffmpeg, cmake, python (если нужен вспомогательный скрипт), сборка whisper.cpp
  - Скрипт bootstrap.sh или Makefile для dev-машины
  - Критерий приёма: один скрипт подготавливает окружение на чистой macOS
- [ ] Подготовить сборку и бинарники whisper.cpp для Apple Silicon и Intel
  - Скомпилировать ggml-версии моделей, собрать статическую библиотеку/CLI
  - Критерий приёма: локально собранный бинарник работает и транскрибирует тестовый файл

4 Архитектура приложения
- [ ] Спроектировать модули
  - UI (SwiftUI)
  - Processing Engine (оркестровка: сегментация -> транскрипция -> постобработка)
  - Local ASR wrapper (взаимодействие с whisper.cpp/Vosk)
  - Exporter (AVFoundation M4A + главы)
  - Persistence (проекты, кэш моделей, логи)
  - CLI/daemon если нужно off-main-thread выполнение
  - Критерий приёма: диаграмма компонентов и описание API между модулями
- [ ] Решить механизм запуска локальных моделей из приложения
  - Варианты: встраиваемая C/C++ библиотека через bridging, вызов внешнего процесса (включая подписанный бинарник), или Swift wrapper с C-API
  - Критерий приёма: выбран безопасный и удобный для sandbox вариант

5 Реализация MVP GUI
- [ ] Экран выбора/дропа файла
  - drag&drop, выбор каталога, отображение базовых ID3 тегов
  - Критерий приёма: можно выбрать MP3 и увидеть базовые метаданные
- [ ] Экран обработки и прогресса
  - очередь задач, прогресс транскрипции и сегментации, лог
  - Критерий приёма: прогресс отражает реальные этапы и можно отменить задачу
- [ ] Редактор глав
  - список предложенных глав, редактирование заголовка и времени, предпрослушивание
  - Критерий приёма: пользователь может отредактировать и сохранить главы

6 Детекция глав и сегментация локальными методами
- [ ] Реализовать initial detector на основе тишины
  - ffmpeg silencedetect или AVAudio PCM анализ (RMS, energy, zero-crossing)
  - Параметры порогов и минимальная длительность паузы вынесены в настройки


- Критерий приёма: возвращается список candidate timestamps
-   Интегрировать ASR локально для проверки маркеров главы
  - транскрибировать короткие отрезки вокруг candidate timestamps
  - искать словосочетания вроде «глава», «chapter», номера, паузы, ключевые фразы
  - Критерий приёма: если в речи явно есть «глава», соответствие фиксируется в UI
-   Постобработка сегментов
  - слияние теснорасположенных меток, удаление коротких/ложных сегментов
  - Критерий приёма: финальный список глав стабильный на тестовой выборке

7 Полная локальная транскрипция
-   Pipeline транскрипции файла
  - разбивка на чанки по длине и/или по сегментам, обработка очередью, сбор временных меток
  - учесть память и CPU/GPU на Apple Silicon (MPS/MPS-onnx)
  - Критерий приёма: транскрипция полноформатного файла выполняется локально и мэпится на таймкоды
-   Оптимизация скорости и памяти
  - использование меньших моделей для чернового прохода, прогон рекомендуемых частей более точной моделью
  - поддержка quantized моделей ggml для уменьшения использования памяти
  - Критерий приёма: приемлемое время транскрипции на M1/M2 (указать целевое время в документации)
-   Кэширование результатов
  - сохранять транскрипты и промежуточные данные, чтобы не выполнять повторно
  - Критерий приёма: при повторной обработке того же файла используется кэш

8 Извлечение и авто заполнение метаданных исключительно локально
-   Поиск названия и автора в транскрипте
  - правила: анализ первых N минут, шаблоны речи, числовые последовательности (ISBN)
  - fallback: теги ID3
  - Критерий приёма: в 80% тестовых файлов предлагается корректный title/author
-   Локальная проверка соответствия длительности и названия
  - сравнение длины файла с предполагаемой длительностью в метаданных
  - Критерий приёма: приложение не предлагает явно не подходящие метаданные
-   Опциональная локальная база обложек
  - если нет внешнего доступа, предложить импорт изображения из файла или папки пользователя
  - Критерий приёма: можно выбрать и встроить локальное изображение как cover

9 Экспорт в M4A с главами и метаданными нативно
-   Реализовать экспорт через AVFoundation
  - создать M4A контейнер, вставить аудио (перекодирование при необходимости), добавить главы через AVChapterMetadataSpecification
  - Критерий приёма: полученный M4A открыт в Apple Books/QuickTime с видимыми главами
-   Встраивание тегов и обложки
  - title, artist, album, cover art embedded
  - Критерий приёма: теги видны в Finder/QuickTime
-   Механизм выбора кодека и качества
  - профиль экспорта: без потерь или AAC с заданным bitrate
  - Критерий приёма: рабочие пресеты для сохранения качества и размера

10 UI/UX улучшения и инструменты редактирования
-   Waveform view и точная подгонка меток
  - отображение волновой формы, drag handles, кнопки jump-to-preview
  - Критерий приёма: можно точно поставить метку с шагом <= 0.1s
-   Массовая обработка и очередь задач
  - drag&drop папки, управление приоритетом задач
  - Критерий приёма: можно поставить в очередь более 5 файлов и обработать последовательно
-   Профили и настройки
  - профили ASR (модель small/medium/large), пороги детекции тишины, опции кэширования

11 Тестирование и валидация локального подхода
-   Unit и интеграционные тесты
  - тесты сегментации, соответствия таймкодов, корректности экспорта
  - Критерии: покрытие основных модулей, тестовый набор аудио
-   Энд‑ту‑энд тесты на реальных книгах/подкастах
  - контрольный датасет разных голосов, шумов и скоростей речи
  - Критерий приёма: метрика успешных конвертаций > 90% на датасете
-   Бета тестирование offline
  - собрать тестеров с различными Mac конфигурациями (Intel, M1, M2)
  - Критерий приёма: список критических багов устранён

12 CI/CD, подпись и notarize при локальных бинарниках
-   Подготовить схему сборки и подписи встроенных бинарников (whisper.cpp)
  - автосборка и подпись в CI, интеграция с Fastlane или xcodebuild + altool
  - Критерий приёма: сборка проходит notarize без предупреждений
-   Упаковка приложения

- DMG/PKG или App Store (учесть sandbox ограничения при вызове локальных бинарников)
  - Критерий приёма: конечный пакет устанавливается на чистую macOS

13 Лицензирование и юридические аспекты
-   Проверить лицензии используемых локальных компонентов
  - ggml/whisper.cpp лицензии, ffmpeg лицензия, Vosk лицензия
  - Критерий приёма: документ с рисками и путями минимизации юридических вопросов
-   Политика конфиденциальности и локальная обработка
  - ясно указывать что все данные остаются локально
  - Критерий приёма: текст политики готов и добавлен в приложение

14 Документация и поддержка
-   Пользовательская документация
  - Quickstart, объяснение профилей ASR, руководство по настройке порогов
  - Критерий приёма: доступная help-страница в приложении и README
-   Встроенные логи и механизм отчётов
  - опциональный экспорт логов для отладки, с согласием пользователя
  - Критерий приёма: можно собрать лог и воспроизвести ошибку

15 Пострелизные улучшения
-   Улучшение accuracy через pipelining моделей
  - сначала cheap модель для rough, затем fine модель на candidate segments
-   Добавление speaker diarization локально
  - pyannote локально или другие on-device модели
-   Оптимизация под GPU/Metal
  - использование MPS acceleration для ONNX/Whisper backends

Оценки времени для команды 1–2 разработчика
- Подготовка и архитектура 1 неделя
- Сборка локальной ASR и окружения 1–2 недели
- MVP GUI + pipeline сегментации и базовой транскрипции 4–6 недель
- Экспорт и тестирование M4A, подпись 2–3 недели
- Тестирование и исправление багов 2–3 недели

Риски и замечания
- Размер моделей и потребления памяти на машинах младших поколений
- Время транскрипции на слабых Mac может быть велико; предусмотреть прогресс, кэширование и возможность выбора «быстрой» модели
- Подписанные бинарники и sandboxing требуют аккуратной настройки и тестов для App Store

Далее
- Выбрать конкретный локальный движок ASR: whisper.cpp (рекомендую) или Vosk/ONNX
- Хочешь, чтобы я расписал первый спринт с задачами в формате GitHub Issues и примерными оценками по часам?