import Foundation
import AVFoundation
import AppKit

struct ConsoleApp {
    static func main() {
        print("üéµ –ê—É–¥–∏–æ –≤ M4B –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä (–ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
        print("==============================================")

        let args = CommandLine.arguments

        if args.count < 2 {
            printUsage()
            return
        }

        let config = parseArguments(args)
        guard let config = config else {
            printUsage()
            return
        }

        runConversion(with: config)
    }

    private static func printUsage() {
        print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  \(CommandLine.arguments[0]) <–≤—Ö–æ–¥–Ω—ã–µ_—Ñ–∞–π–ª—ã> [–æ–ø—Ü–∏–∏]")
        print("\n–ü—Ä–∏–º–µ—Ä—ã:")
        print("  \(CommandLine.arguments[0]) *.mp3 --author \"–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π\" --title \"–í–æ–π–Ω–∞ –∏ –º–∏—Ä\"")
        print("  \(CommandLine.arguments[0]) chapter1.mp3 chapter2.mp3 --output book.m4b --cover cover.jpg")
        print("  \(CommandLine.arguments[0]) /path/to/folder --auto-detect")
        print("\n–û–ø—Ü–∏–∏:")
        print("  --author <—Ç–µ–∫—Å—Ç>       –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏")
        print("  --title <—Ç–µ–∫—Å—Ç>        –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
        print("  --genre <—Ç–µ–∫—Å—Ç>        –ñ–∞–Ω—Ä")
        print("  --description <—Ç–µ–∫—Å—Ç>  –û–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
        print("  --series <—Ç–µ–∫—Å—Ç>       –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏")
        print("  --series-number <–Ω–æ–º–µ—Ä> –ù–æ–º–µ—Ä –∫–Ω–∏–≥–∏ –≤ —Å–µ—Ä–∏–∏")
        print("  --cover <—Ñ–∞–π–ª>         –ü—É—Ç—å –∫ –æ–±–ª–æ–∂–∫–µ")
        print("  --output <—Ñ–∞–π–ª>        –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: <title>.m4b)")
        print("  --auto-detect          –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏")
        print("  --recursive            –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–∞—Ö")
        print("  --quality <—É—Ä–æ–≤–µ–Ω—å>    –ö–∞—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ (high, medium, low)")
        print("  --chapters <–º–∏–Ω>       –†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –≥–ª–∞–≤—ã (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö)")
        print("  --help                 –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
    }

    private static func parseArguments(_ args: [String]) -> ConversionConfig? {
        var config = ConversionConfig()
        var inputFiles: [String] = []
        var i = 1

        while i < args.count {
            let arg = args[i]

            switch arg {
            case "--help":
                printUsage()
                return nil
            case "--author":
                if i + 1 < args.count {
                    config.author = args[i + 1]
                    i += 2
                } else {
                    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∞–≤—Ç–æ—Ä –ø–æ—Å–ª–µ --author")
                    return nil
                }
            case "--title":
                if i + 1 < args.count {
                    config.title = args[i + 1]
                    i += 2
                } else {
                    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ --title")
                    return nil
                }
            case "--genre":
                if i + 1 < args.count {
                    config.genre = args[i + 1]
                    i += 2
                } else {
                    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∂–∞–Ω—Ä –ø–æ—Å–ª–µ --genre")
                    return nil
                }
            case "--description":
                if i + 1 < args.count {
                    config.description = args[i + 1]
                    i += 2
                } else {
                    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ --description")
                    return nil
                }
            case "--series":
                if i + 1 < args.count {
                    config.series = args[i + 1]
                    i += 2
                } else {
                    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Å–µ—Ä–∏—è –ø–æ—Å–ª–µ --series")
                    return nil
                }
            case "--series-number":
                if i + 1 < args.count {
                    config.seriesNumber = args[i + 1]
                    i += 2
                } else {
                    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –ø–æ—Å–ª–µ --series-number")
                    return nil
                }
            case "--cover":
                if i + 1 < args.count {
                    config.coverPath = args[i + 1]
                    i += 2
                } else {
                    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –æ–±–ª–æ–∂–∫–µ –ø–æ—Å–ª–µ --cover")
                    return nil
                }
            case "--output":
                if i + 1 < args.count {
                    config.outputPath = args[i + 1]
                    i += 2
                } else {
                    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ --output")
                    return nil
                }
            case "--auto-detect":
                config.autoDetect = true
                i += 1
            case "--recursive":
                config.recursive = true
                i += 1
            case "--quality":
                if i + 1 < args.count {
                    config.quality = args[i + 1]
                    i += 2
                } else {
                    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ --quality")
                    return nil
                }
            case "--chapters":
                if i + 1 < args.count {
                    config.chapterDuration = Int(args[i + 1]) ?? 0
                    i += 2
                } else {
                    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–ª–∞–≤ –ø–æ—Å–ª–µ --chapters")
                    return nil
                }
            default:
                // –≠—Ç–æ –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞
                inputFiles.append(arg)
                i += 1
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        config.inputFiles = resolveInputFiles(inputFiles)

        if config.inputFiles.isEmpty {
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            return nil
        }

        // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if config.autoDetect {
            autoDetectMetadata(&config)
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if config.title.isEmpty {
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ (--title)")
            return nil
        }

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if config.outputPath.isEmpty {
            config.outputPath = "\(config.title).m4b"
        }

        return config
    }

    private static func resolveInputFiles(_ inputs: [String]) -> [URL] {
        var files: [URL] = []

        for input in inputs {
            let url = URL(fileURLWithPath: input)

            if url.hasDirectoryPath {
                // –≠—Ç–æ –ø–∞–ø–∫–∞ - –Ω–∞–π—Ç–∏ –≤—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
                if let folderFiles = findAudioFiles(in: url, recursive: config.recursive) {
                    files.append(contentsOf: folderFiles)
                }
            } else {
                // –≠—Ç–æ —Ñ–∞–π–ª
                if isAudioFile(url) {
                    files.append(url)
                }
            }
        }

        return files.sorted { $0.lastPathComponent < $1.lastPathComponent }
    }

    private static func findAudioFiles(in directory: URL, recursive: Bool = true) -> [URL]? {
        let fileManager = FileManager.default
        let audioExtensions = ["mp3", "aac", "m4a", "wav", "aiff"]
        var audioFiles: [URL] = []

        let enumerator = fileManager.enumerator(at: directory, includingPropertiesForKeys: nil, options: [.skipsHiddenFiles])

        while let fileURL = enumerator?.nextObject() as? URL {
            if recursive || fileURL.deletingLastPathComponent() == directory {
                let ext = fileURL.pathExtension.lowercased()
                if audioExtensions.contains(ext) {
                    audioFiles.append(fileURL)
                }
            }
        }

        return audioFiles.isEmpty ? nil : audioFiles
    }

    private static func isAudioFile(_ url: URL) -> Bool {
        let audioExtensions = ["mp3", "aac", "m4a", "wav", "aiff"]
        return audioExtensions.contains(url.pathExtension.lowercased())
    }

    private static func autoDetectMetadata(_ config: inout ConversionConfig) {
        if let firstFile = config.inputFiles.first {
            let folderURL = firstFile.deletingLastPathComponent()
            let folderName = folderURL.lastPathComponent

            let components = folderName.components(separatedBy: " - ")
            if components.count >= 2 {
                if config.author.isEmpty {
                    config.author = components[0].trimmingCharacters(in: .whitespaces)
                }
                if config.title.isEmpty {
                    config.title = components[1].trimmingCharacters(in: .whitespaces)
                }
            } else if config.title.isEmpty {
                config.title = folderName
            }
        }
    }

    private static func runConversion(with config: ConversionConfig) {
        print("\nüìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: \(config.inputFiles.count)")
        for (index, file) in config.inputFiles.enumerated() {
            print("  [\(index + 1)] \(file.lastPathComponent)")
        }

        print("\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print("  –ê–≤—Ç–æ—Ä: \(config.author)")
        print("  –ù–∞–∑–≤–∞–Ω–∏–µ: \(config.title)")
        print("  –ñ–∞–Ω—Ä: \(config.genre)")
        print("  –û–ø–∏—Å–∞–Ω–∏–µ: \(config.description)")
        print("  –°–µ—Ä–∏—è: \(config.series)")
        print("  –ù–æ–º–µ—Ä –≤ —Å–µ—Ä–∏–∏: \(config.seriesNumber)")
        print("  –ö–∞—á–µ—Å—Ç–≤–æ: \(config.quality)")
        print("  –ì–ª–∞–≤—ã: \(config.chapterDuration > 0 ? "\(config.chapterDuration) –º–∏–Ω" : "–±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è")")
        print("  –û–±–ª–æ–∂–∫–∞: \(config.coverPath ?? "–Ω–µ—Ç")")
        print("  –í—ã—Ö–æ–¥: \(config.outputPath)")

        print("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...")

        // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–∫–∏
        var coverImage: NSImage?
        if let coverPath = config.coverPath {
            coverImage = NSImage(contentsOfFile: coverPath)
            if coverImage == nil {
                print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–ª–æ–∂–∫—É \(coverPath)")
            }
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        AudioConverter.convertAudioToM4B(
            inputURLs: config.inputFiles,
            outputURL: URL(fileURLWithPath: config.outputPath),
            author: config.author,
            title: config.title,
            genre: config.genre,
            description: config.description,
            series: config.series,
            seriesNumber: config.seriesNumber,
            quality: config.quality,
            chapterDurationMinutes: config.chapterDuration,
            coverImage: coverImage
        ) { progress in
            print("   –ü—Ä–æ–≥—Ä–µ—Å—Å: \(Int(progress * 100))%")
        } completion: { result in
            switch result {
            case .success:
                print("\n‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                print("   –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: \(config.outputPath)")
                if let attributes = try? FileManager.default.attributesOfItem(atPath: config.outputPath),
                   let fileSize = attributes[.size] as? Int64 {
                    let sizeMB = Double(fileSize) / 1024.0 / 1024.0
                    print("   –†–∞–∑–º–µ—Ä: \(String(format: "%.1f", sizeMB)) MB")
                }
                print("   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã: ‚úì")
                print("\nüéâ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Apple Books")
            case .failure(let error):
                print("\n‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: \(error.localizedDescription)")
                exit(1)
            }
        }

        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        RunLoop.main.run()
    }
}

struct ConversionConfig {
    var inputFiles: [URL] = []
    var author = ""
    var title = ""
    var genre = ""
    var description = ""
    var series = ""
    var seriesNumber = ""
    var coverPath: String?
    var outputPath = ""
    var autoDetect = false
    var recursive = false
    var quality = "high" // high, medium, low
    var chapterDuration = 0 // –≤ –º–∏–Ω—É—Ç–∞—Ö, 0 = –±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
}