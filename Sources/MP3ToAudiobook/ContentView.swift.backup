import SwiftUI
import UniformTypeIdentifiers

extension UTType {
    static var audio: UTType {
        UTType(filenameExtension: "m4b") ?? .audio
    }
}

struct ContentView: View {
    @EnvironmentObject private var settings: AppSettings

    @State private var selectedFiles: [URL] = []
    @State private var originalFiles: [URL] = [] // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω
    @State private var author = ""
    @State private var title = ""
    @State private var coverImage: NSImage?
    @State private var isConverting = false
    @State private var progress = 0.0
    @State private var showFileImporter = false
    @State private var showCoverImporter = false
    @State private var showSavePanel = false
    @State private var statusMessage = ""
    @State private var statusColor = Color.primary
    @State private var logs = ""
    
    var body: some View {
        VStack(spacing: 20) {
            Text("MP3 –≤ M4B –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä")
                .font(.largeTitle)
                .fontWeight(.bold)

            // –í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤
            Button("–í—ã–±—Ä–∞—Ç—å MP3 —Ñ–∞–π–ª—ã") {
                showFileImporter = true
            }
            .buttonStyle(.borderedProminent)
            .fileImporter(
                isPresented: $showFileImporter,
                allowedContentTypes: [.mp3],
                allowsMultipleSelection: true
            ) { result in
                switch result {
                case .success(let urls):
                    originalFiles = urls
                    selectedFiles = urls // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ URL –Ω–∞–ø—Ä—è–º—É—é
                    if let folderURL = urls.first?.deletingLastPathComponent() {
                        parseFolderName(folderURL)
                    }
                case .failure(let error):
                    print("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤: \(error)")
                }
            }

            if !originalFiles.isEmpty {
                VStack(alignment: .leading) {
                    Text("–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: \(originalFiles.count)")
                        .foregroundColor(.secondary)

                    List(originalFiles, id: \.self) { url in
                        Text(url.lastPathComponent)
                    }
                    .frame(height: 100)
                }
            }

            // –ü–æ–ª—è –≤–≤–æ–¥–∞
            VStack(alignment: .leading, spacing: 10) {
                TextField("–ê–≤—Ç–æ—Ä", text: $author)
                    .textFieldStyle(.roundedBorder)

                TextField("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏", text: $title)
                    .textFieldStyle(.roundedBorder)

                HStack {
                    Button("–í—ã–±—Ä–∞—Ç—å –æ–±–ª–æ–∂–∫—É") {
                        showCoverImporter = true
                    }
                    .buttonStyle(.bordered)

                    if let image = coverImage {
                        Image(nsImage: image)
                            .resizable()
                            .frame(width: 50, height: 50)
                            .clipShape(RoundedRectangle(cornerRadius: 5))
                    }
                }
            }
            .padding(.horizontal)
            .fileImporter(
                isPresented: $showCoverImporter,
                allowedContentTypes: [.image],
                allowsMultipleSelection: false
            ) { result in
                switch result {
                case .success(let urls):
                    if let url = urls.first {
                        coverImage = NSImage(contentsOf: url)
                    }
                case .failure(let error):
                    print("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±–ª–æ–∂–∫–∏: \(error)")
                }
            }

            // –ö–Ω–æ–ø–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            if !originalFiles.isEmpty {
                Button("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ M4B") {
                    showSaveDialog()
                }
                .buttonStyle(.borderedProminent)
                .disabled(isConverting)
            }

            if isConverting {
                ProgressView(value: progress)
                    .progressViewStyle(.linear)
                Text("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è... \(Int(progress * 100))%")
            }

            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            if !statusMessage.isEmpty {
                Text(statusMessage)
                    .foregroundColor(statusColor)
                    .font(.callout)
                    .multilineTextAlignment(.center)
                    .padding(.vertical, 5)
            }

            // –õ–æ–≥–∏ (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if settings.showLogs && !logs.isEmpty {
                VStack(alignment: .leading, spacing: 5) {
                    Text("üìã –õ–æ–≥–∏:")
                        .font(.headline)
                        .foregroundColor(.secondary)

                    ScrollView {
                        VStack(alignment: .leading, spacing: 2) {
                            ForEach(logs, id: \.self) { log in
                                Text(log)
                                    .font(.system(.caption, design: .monospaced))
                                    .foregroundColor(.secondary)
                                    .frame(maxWidth: .infinity, alignment: .leading)
                            }
                        }
                        .padding(8)
                    }
                    .frame(height: 150)
                    .background(Color.gray.opacity(0.1))
                    .cornerRadius(8)
                    .overlay(
                        RoundedRectangle(cornerRadius: 8)
                            .stroke(Color.gray.opacity(0.3), lineWidth: 1)
                    )
                }
                .padding(.vertical, 10)
            }

            // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            HStack(spacing: 20) {
                // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞
                if !originalFiles.isEmpty && !isConverting {
                    Button("–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫") {
                        clearFileList()
                    }
                    .buttonStyle(.bordered)
                    .foregroundColor(.red)
                }

                // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
                Button("–í—ã—Ö–æ–¥") {
                    exitApplication()
                }
                .buttonStyle(.bordered)
                .foregroundColor(.gray)
            }

            // –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
            if settings.showLogs {
                VStack(alignment: .leading, spacing: 10) {
                    HStack {
                        Text("–õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
                            .font(.headline)
                        Spacer()
                        Button("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏") {
                            copyLogsToClipboard()
                        }
                        .buttonStyle(.bordered)
                        Button("–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏") {
                            clearLogs()
                        }
                        .buttonStyle(.bordered)
                        Button("–°–∫—Ä—ã—Ç—å –ª–æ–≥–∏") {
                            settings.showLogs.toggle()
                        }
                        .buttonStyle(.bordered)
                    }

                    ScrollView {
                        Text(logs.isEmpty ? "–õ–æ–≥–∏ –ø—É—Å—Ç—ã" : logs)
                            .font(.system(.body, design: .monospaced))
                            .frame(maxWidth: .infinity, alignment: .leading)
                            .padding(8)
                            .background(Color.gray.opacity(0.1))
                            .cornerRadius(5)
                    }
                    .frame(height: 200)
                }
                .padding(.top)
            } else {
                Button("–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏") {
                    settings.showLogs.toggle()
                }
                .buttonStyle(.bordered)
                .padding(.top)
            }
        }
        .padding()
        .frame(minWidth: 500, minHeight: 400)
    }
    
    private func parseFolderName(_ folderURL: URL) {
        let folderName = folderURL.lastPathComponent
        // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "–ê–≤—Ç–æ—Ä - –ù–∞–∑–≤–∞–Ω–∏–µ"
        let components = folderName.components(separatedBy: " - ")
        if components.count >= 2 {
            author = components[0].trimmingCharacters(in: .whitespaces)
            title = components[1].trimmingCharacters(in: .whitespaces)
        } else {
            title = folderName
        }
    }
    
    private func showSaveDialog() {
        let savePanel = NSSavePanel()
        savePanel.allowedContentTypes = [.audio]
        savePanel.canCreateDirectories = true
        savePanel.nameFieldStringValue = "\(title).m4b"
        
        savePanel.begin { response in
            if response == .OK, let url = savePanel.url {
                convertToM4B(outputURL: url)
            }
        }
    }
    
    private func convertToM4B(outputURL: URL) {
        guard !author.isEmpty && !title.isEmpty else {
            statusMessage = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"
            statusColor = .red
            return
        }

        isConverting = true
        progress = 0.0
        statusMessage = ""

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if settings.showLogs {
            addLog("=== –ù–ê–ß–ê–õ–û –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò ===")
            addLog("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: \(selectedFiles.count)")
            addLog("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            for (index, url) in selectedFiles.enumerated() {
                addLog("  [\(index)]: \(url.path)")
            }
            addLog("–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: \(outputURL.path)")
            addLog("========================")
        }

        AudioConverter.convertMP3ToM4B(
            inputURLs: selectedFiles,
            outputURL: outputURL,
            author: author,
            title: title,
            coverImage: coverImage,
            progressHandler: { progressValue in
                DispatchQueue.main.async {
                    self.progress = progressValue
                }
            },
            logHandler: { logMessage in
                DispatchQueue.main.async {
                    self.addLog(logMessage)
                }
            },
            completion: { result in
                DispatchQueue.main.async {
                    self.isConverting = false
                    self.progress = 0.0

                    self.addLog("=== –†–ï–ó–£–õ–¨–¢–ê–¢ –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò ===")
                    switch result {
                    case .success:
                        self.addLog("‚úÖ –£–°–ü–ï–•")
                        self.statusMessage = "‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
                        self.statusColor = .green
                    case .failure(let error):
                        self.addLog("‚ùå –û–®–ò–ë–ö–ê: \(error.localizedDescription)")
                        self.addLog("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏: \(error)")
                        self.statusMessage = "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: \(error.localizedDescription)"
                        self.statusColor = .red
                    }
                    self.addLog("==========================")
                }
            }
        )
    }

    private func clearFileList() {
        selectedFiles = []
        originalFiles = []
        author = ""
        title = ""
        coverImage = nil
        statusMessage = ""
    }

    private func exitApplication() {
        NSApplication.shared.terminate(nil)
    }

    private func addLog(_ message: String) {
        let timestamp = DateFormatter.localizedString(from: Date(), dateStyle: .none, timeStyle: .medium)
        let logEntry = "[\(timestamp)] \(message)\n"
        logs += logEntry
        print(message) // –û—Å—Ç–∞–≤–ª—è–µ–º print –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    }

    private func copyLogsToClipboard() {
        NSPasteboard.general.clearContents()
        NSPasteboard.general.setString(logs, forType: .string)
        statusMessage = "–õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"
        statusColor = .blue
    }

    private func clearLogs() {
        logs = ""
    }

}

#Preview {
    ContentView()
}